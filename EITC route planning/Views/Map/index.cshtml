<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css">
        <link rel="stylesheet" href="css/qgis2web.css"><link rel="stylesheet" href="css/fontawesome-all.min.css">
        <link rel="stylesheet" href="css/leaflet-measure.css">
        <style>
        #map {
            width: 783px;
            height: 818px;
        }
        </style>
        <title></title>
    </head>
    <body>
        <div id="map">
        </div>
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="js/leaflet.wms.js"></script>
        <script src="js/leaflet-measure.js"></script>
        <script src="data/temp_bound_1.js"></script>
        <script src="data/cities_3.js"></script>
        <script src="data/routes_4.js"></script>
        <script>
        var m2px = 1;
        function newM2px() {
            var centerLatLng = map.getCenter();
            var pointC = map.latLngToContainerPoint(centerLatLng);
            var pointX = [pointC.x + 100, pointC.y];

            var latLngC = map.containerPointToLatLng(pointC);
            var latLngX = map.containerPointToLatLng(pointX);

            var distanceX = latLngC.distanceTo(latLngX)/100;

            reciprocal = 1 / distanceX;
            m2px = reciprocal;
        }
        function geoStyle(m) {
            return Math.ceil(m * m2px);
        }
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString') {
              highlightLayer.setStyle({
                color: '#ffff00',
              });
            } else {
              highlightLayer.setStyle({
                fillColor: '#ffff00',
                fillOpacity: 1
              });
            }
            highlightLayer.openPopup();
        }
        var map = L.map('map', {
            zoomControl:true, maxZoom:28, minZoom:1
        }).fitBounds([[-15.375514316603553,-31.395893154706176],[55.836443176260374,47.8051718913788]]);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="http://leafletjs.com" title="A JS library for interactive maps">Leaflet</a>');
        var measureControl = new L.Control.Measure({
            position: 'topleft',
            primaryLengthUnit: 'meters',
            secondaryLengthUnit: 'kilometers',
            primaryAreaUnit: 'sqmeters',
            secondaryAreaUnit: 'hectares'
        });
        measureControl.addTo(map);
        document.getElementsByClassName('leaflet-control-measure-toggle')[0]
        .innerHTML = '';
        document.getElementsByClassName('leaflet-control-measure-toggle')[0]
        .className += ' fas fa-ruler';
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
        }
        var layer_OSMWMSosmwmsde_0 = L.WMS.layer("http://maps.heigit.org/osm-wms/service", "osm_auto:all", {
            format: 'image/png',
            uppercase: true,
            transparent: true,
            continuousWorld : true,
            tiled: true,
            info_format: 'text/html',
            opacity: 1,
            identify: false,
            attribution: '',
        });
        map.addLayer(layer_OSMWMSosmwmsde_0);
        function pop_temp_bound_1(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['id'] !== null ? Autolinker.link(String(feature.properties['id'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_temp_bound_1_0() {
            return {
                pane: 'pane_temp_bound_1',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(0,0,0,1.0)',
            }
        }
        map.createPane('pane_temp_bound_1');
        map.getPane('pane_temp_bound_1').style.zIndex = 401;
        map.getPane('pane_temp_bound_1').style['mix-blend-mode'] = 'normal';
        var layer_temp_bound_1 = new L.geoJson(json_temp_bound_1, {
            attribution: '',
            pane: 'pane_temp_bound_1',
            onEachFeature: pop_temp_bound_1,
            style: style_temp_bound_1_0,
        });
        bounds_group.addLayer(layer_temp_bound_1);
        var img_Beskretmaske_2 = 'data/Beskretmaske_2.png';
        var img_bounds_Beskretmaske_2 = [[-43.18500233595677,-21.122595927930124],[53.42100891370607,53.31244380531461]];
        var layer_Beskretmaske_2 = new L.imageOverlay(img_Beskretmaske_2, img_bounds_Beskretmaske_2);
        bounds_group.addLayer(layer_Beskretmaske_2);
        map.addLayer(layer_Beskretmaske_2);
        function pop_cities_3(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['id'] !== null ? Autolinker.link(String(feature.properties['id'])) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">name</th>\
                        <td>' + (feature.properties['name'] !== null ? Autolinker.link(String(feature.properties['name'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_cities_3_0() {
            return {
                pane: 'pane_cities_3',
                radius: geoStyle(100000.0),
                opacity: 1,
                color: 'rgba(0,0,0,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(227,26,28,1.0)',
            }
        }
        map.createPane('pane_cities_3');
        map.getPane('pane_cities_3').style.zIndex = 403;
        map.getPane('pane_cities_3').style['mix-blend-mode'] = 'normal';
        var layer_cities_3 = new L.geoJson(json_cities_3, {
            attribution: '',
            pane: 'pane_cities_3',
            onEachFeature: pop_cities_3,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_cities_3_0(feature));
            },
        });
        bounds_group.addLayer(layer_cities_3);
        map.addLayer(layer_cities_3);
        function pop_routes_4(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['id'] !== null ? Autolinker.link(String(feature.properties['id'])) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">sections</th>\
                        <td>' + (feature.properties['sections'] !== null ? Autolinker.link(String(feature.properties['sections'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_routes_4_0() {
            return {
                pane: 'pane_routes_4',
                opacity: 1,
                color: 'rgba(62,22,238,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'miter',
                weight: 3.0,
                fillOpacity: 0,
            }
        }
        map.createPane('pane_routes_4');
        map.getPane('pane_routes_4').style.zIndex = 404;
        map.getPane('pane_routes_4').style['mix-blend-mode'] = 'normal';
        var layer_routes_4 = new L.geoJson(json_routes_4, {
            attribution: '',
            pane: 'pane_routes_4',
            onEachFeature: pop_routes_4,
            style: style_routes_4_0,
        });
        bounds_group.addLayer(layer_routes_4);
        map.addLayer(layer_routes_4);
        setBounds();
        var i = 0;
        layer_cities_3.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['name'] !== null?String('<div style="color: #000000; font-size: 10pt; font-family: \'MS Shell Dlg 2\', sans-serif;">' + layer.feature.properties['name']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_cities_3'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_routes_4.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['sections'] !== null?String('<div style="color: #000000; font-size: 10pt; font-family: \'MS Shell Dlg 2\', sans-serif;">' + layer.feature.properties['sections']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_routes_4'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        newM2px();

            layer_cities_3.setStyle(style_cities_3_0);
        map.on("zoomend", function(){
            newM2px();

            layer_cities_3.setStyle(style_cities_3_0);
        });
        L.ImageOverlay.include({
            getBounds: function () {
                return this._bounds;
            }
        });
        resetLabels([layer_cities_3,layer_routes_4]);
        map.on("zoomend", function(){
            resetLabels([layer_cities_3,layer_routes_4]);
        });
        map.on("layeradd", function(){
            resetLabels([layer_cities_3,layer_routes_4]);
        });
        map.on("layerremove", function(){
            resetLabels([layer_cities_3,layer_routes_4]);
        });
        </script>
    </body>
</html>
